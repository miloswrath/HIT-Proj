{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Fall24 MS\\\\CS3980 Proj\\\\cap_rx_3\\\\HIT-Proj\\\\code\\\\app\\\\src\\\\ConnectedChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport ChatRow from './ChatRow';\nimport UserInputBox from './UserInputBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectedChatWindow = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  preMessageContent,\n  interpretation\n}, ref) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [showPreMessage, setShowPreMessage] = useState(true);\n  const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\n  // Expose addMessage function to parent via ref\n  useImperativeHandle(ref, () => ({\n    /**\r\n     * Adds a new message to the chat and sends it to the server.\r\n     * @param {string} chatContent - The content of the chat message.\r\n     * @param {string} originatingUser - The user who originated the message.\r\n     */\n    addMessage: async (chatContent, originatingUser) => {\n      const newMessage = {\n        chatContent,\n        originatingUser\n      };\n      const updatedMessages = [...messages, newMessage];\n      console.log('CONNECTED_Window_AddMessage_Proc');\n      try {\n        const response = await fetch('http://localhost:8000/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            currentMessage: newMessage,\n            previousMessages: messages\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Server response:', data);\n\n        // Update the messages state with the new message\n        const updateMessagesWithBotResponse = [...updatedMessages, {\n          chatContent: data.response,\n          originatingUser: 'bot'\n        }];\n        setMessages(updateMessagesWithBotResponse);\n      } catch (error) {\n        console.error('Error sending message to server:', error);\n      }\n    }\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\",\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatRow, {\n      chatContent: message.chatContent,\n      originatingUser: message.originatingUser\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(UserInputBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}, \"+00QnU/+5UuERRq3A/bJNNNIgo0=\")), \"+00QnU/+5UuERRq3A/bJNNNIgo0=\");\n_c2 = ConnectedChatWindow;\nexport default ConnectedChatWindow;\nvar _c, _c2;\n$RefreshReg$(_c, \"ConnectedChatWindow$forwardRef\");\n$RefreshReg$(_c2, \"ConnectedChatWindow\");","map":{"version":3,"names":["React","useState","useImperativeHandle","forwardRef","ChatRow","UserInputBox","jsxDEV","_jsxDEV","ConnectedChatWindow","_s","_c","preMessageContent","interpretation","ref","messages","setMessages","showPreMessage","setShowPreMessage","isPreMessageExiting","setIsPreMessageExiting","addMessage","chatContent","originatingUser","newMessage","updatedMessages","console","log","response","fetch","method","headers","body","JSON","stringify","currentMessage","previousMessages","ok","Error","data","json","updateMessagesWithBotResponse","error","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Fall24 MS/CS3980 Proj/cap_rx_3/HIT-Proj/code/app/src/ConnectedChatWindow.js"],"sourcesContent":["import React, { useState, useImperativeHandle, forwardRef } from 'react';\r\nimport ChatRow from './ChatRow';\r\nimport UserInputBox from './UserInputBox';\r\n\r\nconst ConnectedChatWindow = forwardRef(({ preMessageContent, interpretation }, ref) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [showPreMessage, setShowPreMessage] = useState(true);\r\n    const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\r\n    // Expose addMessage function to parent via ref\r\n     useImperativeHandle(ref, () => ({\r\n      /**\r\n       * Adds a new message to the chat and sends it to the server.\r\n       * @param {string} chatContent - The content of the chat message.\r\n       * @param {string} originatingUser - The user who originated the message.\r\n       */\r\n      addMessage: async (chatContent, originatingUser) => {\r\n          const newMessage = { chatContent, originatingUser };\r\n          const updatedMessages = [...messages, newMessage];\r\n          console.log('CONNECTED_Window_AddMessage_Proc')\r\n          try {\r\n              const response = await fetch('http://localhost:8000/api/messages', {\r\n                  method: 'POST',\r\n                  headers: {\r\n                      'Content-Type': 'application/json',\r\n                  },\r\n                  body: JSON.stringify({\r\n                      currentMessage: newMessage,\r\n                      previousMessages: messages,\r\n                  }),\r\n              });\r\n\r\n              if (!response.ok) {\r\n                  throw new Error('Network response was not ok');\r\n              }\r\n\r\n              const data = await response.json();\r\n              console.log('Server response:', data);\r\n\r\n            // Update the messages state with the new message\r\n            const updateMessagesWithBotResponse = [...updatedMessages, { chatContent: data.response, originatingUser: 'bot'}];\r\n            setMessages(updateMessagesWithBotResponse)\r\n          } catch (error) {\r\n              console.error('Error sending message to server:', error);\r\n          }\r\n      },\r\n  }));\r\n    return (\r\n        <div className=\"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\">\r\n            {/* Render ChatRows with animation */}\r\n            {messages.map((message, index) => (\r\n                <ChatRow\r\n                    key={index}\r\n                    chatContent={message.chatContent}\r\n                    originatingUser={message.originatingUser}\r\n                />\r\n            ))}\r\n            <UserInputBox/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ConnectedChatWindow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,OAAO;AACxE,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,mBAAmB,gBAAAC,EAAA,cAAGN,UAAU,CAAAO,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,iBAAiB;EAAEC;AAAe,CAAC,EAAEC,GAAG,KAAK;EAAAJ,EAAA;EACnF,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACiB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACrE;EACCC,mBAAmB,CAACW,GAAG,EAAE,OAAO;IAC/B;AACN;AACA;AACA;AACA;IACMO,UAAU,EAAE,MAAAA,CAAOC,WAAW,EAAEC,eAAe,KAAK;MAChD,MAAMC,UAAU,GAAG;QAAEF,WAAW;QAAEC;MAAgB,CAAC;MACnD,MAAME,eAAe,GAAG,CAAC,GAAGV,QAAQ,EAAES,UAAU,CAAC;MACjDE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBC,cAAc,EAAEX,UAAU;YAC1BY,gBAAgB,EAAErB;UACtB,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAACa,QAAQ,CAACS,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;QAClCd,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,IAAI,CAAC;;QAEvC;QACA,MAAME,6BAA6B,GAAG,CAAC,GAAGhB,eAAe,EAAE;UAAEH,WAAW,EAAEiB,IAAI,CAACX,QAAQ;UAAEL,eAAe,EAAE;QAAK,CAAC,CAAC;QACjHP,WAAW,CAACyB,6BAA6B,CAAC;MAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZhB,OAAO,CAACgB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC5D;IACJ;EACJ,CAAC,CAAC,CAAC;EACD,oBACIlC,OAAA;IAAKmC,SAAS,EAAC,6GAA6G;IAAAC,QAAA,GAEvH7B,QAAQ,CAAC8B,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzBvC,OAAA,CAACH,OAAO;MAEJiB,WAAW,EAAEwB,OAAO,CAACxB,WAAY;MACjCC,eAAe,EAAEuB,OAAO,CAACvB;IAAgB,GAFpCwB,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACJ,CAAC,eACF3C,OAAA,CAACF,YAAY;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC,kCAAC;AAACC,GAAA,GAvDG3C,mBAAmB;AAyDzB,eAAeA,mBAAmB;AAAC,IAAAE,EAAA,EAAAyC,GAAA;AAAAC,YAAA,CAAA1C,EAAA;AAAA0C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}