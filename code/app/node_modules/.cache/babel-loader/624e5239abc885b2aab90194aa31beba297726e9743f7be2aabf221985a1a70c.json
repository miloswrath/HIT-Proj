{"ast":null,"code":"var _jsxFileName = \"/Users/zakg04/Documents/Personal-Cloud/theJourney/theProj/HIT-Proj/code/app/src/ChatRow.js\",\n  _s = $RefreshSig$();\n// ChatRow.jsx\nimport React, { useState, useEffect } from 'react';\nimport ChatProfileBubble from './ChatProfileBubble';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatRow({\n  chatContent,\n  originatingUser\n}) {\n  _s();\n  const isUser = originatingUser === 'user';\n  const isBot = originatingUser === 'bot';\n  const chatBubbleClasses = `\n        bg-white w-3/4 py-4 px-6 \n        ${isUser ? 'rounded-l-2xl rounded-t-2xl ml-2 ' : ''}\n        ${isBot ? 'rounded-r-2xl rounded-b-2xl mr-2' : ''}\n    `;\n  const contentClass = `\n        w-8/9 flex flex-row\n        ${isUser ? 'justify-end' : ''}\n        ${isBot ? 'justify-start' : ''}\n    `;\n\n  // State for typing animation (only for bot)\n  const [displayedText, setDisplayedText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  useEffect(() => {\n    // Ensure chatContent is a string\n    const sanitizedChatContent = typeof chatContent === 'string' ? chatContent : String(chatContent);\n    if (isBot && sanitizedChatContent.length > 0) {\n      const tokens = tokenizeHTML(sanitizedChatContent);\n      let tokenIndex = 0;\n      let charIndex = 0;\n      let currentDisplayedText = '';\n      setIsTyping(true);\n      setDisplayedText('');\n      const typingSpeed = 15; // milliseconds per character\n      const tagDelay = 0; // delay after a tag\n\n      const type = () => {\n        if (tokenIndex >= tokens.length) {\n          setIsTyping(false);\n          return;\n        }\n        const currentToken = tokens[tokenIndex];\n        if (currentToken.startsWith('<')) {\n          // It's an HTML tag, append it immediately\n          currentDisplayedText += currentToken;\n          setDisplayedText(currentDisplayedText);\n          tokenIndex++;\n          // Continue typing after a small delay\n          setTimeout(type, tagDelay);\n        } else {\n          // It's text, append character by character\n          if (charIndex < currentToken.length) {\n            currentDisplayedText += currentToken.charAt(charIndex);\n            setDisplayedText(currentDisplayedText);\n            charIndex++;\n            setTimeout(type, typingSpeed);\n          } else {\n            // Move to next token\n            tokenIndex++;\n            charIndex = 0;\n            // Small delay before next token\n            setTimeout(type, tagDelay);\n          }\n        }\n      };\n      type();\n    }\n  }, [isBot, chatContent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `w-full flex flex-row transform transition-transform duration-300 animate-popIn`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/12 flex flex-col justify-start items-center pb-6\",\n      children: isBot && /*#__PURE__*/_jsxDEV(ChatProfileBubble, {\n        user: \"bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: contentClass,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chatBubbleClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-700 text-sm font-semibold leading-5 whitespace-pre-wrap\",\n          dangerouslySetInnerHTML: {\n            __html: isBot ? displayedText : chatContent\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), isBot && isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"inline-block w-2 h-2 ml-1 bg-gray-700 rounded-full animate-bounce\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/12 flex flex-col justify-end items-center pt-6\",\n      children: isUser && /*#__PURE__*/_jsxDEV(ChatProfileBubble, {\n        user: \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n// Helper function to tokenize HTML content\n_s(ChatRow, \"UQ25kdMGnuFC5P/kLuPD8AvN944=\");\n_c = ChatRow;\nfunction tokenizeHTML(html) {\n  const regex = /(<[^>]+>)/g;\n  const tokens = html.split(regex).filter(token => token.length > 0);\n  return tokens;\n}\n\n// PropTypes for type checking\nChatRow.propTypes = {\n  chatContent: PropTypes.string.isRequired,\n  originatingUser: PropTypes.oneOf(['user', 'bot']).isRequired\n};\nexport default ChatRow;\nvar _c;\n$RefreshReg$(_c, \"ChatRow\");","map":{"version":3,"names":["React","useState","useEffect","ChatProfileBubble","PropTypes","jsxDEV","_jsxDEV","ChatRow","chatContent","originatingUser","_s","isUser","isBot","chatBubbleClasses","contentClass","displayedText","setDisplayedText","isTyping","setIsTyping","sanitizedChatContent","String","length","tokens","tokenizeHTML","tokenIndex","charIndex","currentDisplayedText","typingSpeed","tagDelay","type","currentToken","startsWith","setTimeout","charAt","className","children","user","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","html","regex","split","filter","token","propTypes","string","isRequired","oneOf","$RefreshReg$"],"sources":["/Users/zakg04/Documents/Personal-Cloud/theJourney/theProj/HIT-Proj/code/app/src/ChatRow.js"],"sourcesContent":["// ChatRow.jsx\nimport React, { useState, useEffect } from 'react';\nimport ChatProfileBubble from './ChatProfileBubble';\nimport PropTypes from 'prop-types';\n\nfunction ChatRow({ chatContent, originatingUser }) {\n    const isUser = originatingUser === 'user';\n    const isBot = originatingUser === 'bot';\n\n    const chatBubbleClasses = `\n        bg-white w-3/4 py-4 px-6 \n        ${isUser ? 'rounded-l-2xl rounded-t-2xl ml-2 ' : ''}\n        ${isBot ? 'rounded-r-2xl rounded-b-2xl mr-2' : ''}\n    `;\n\n    const contentClass = `\n        w-8/9 flex flex-row\n        ${isUser ? 'justify-end' : ''}\n        ${isBot ? 'justify-start' : ''}\n    `;\n\n    // State for typing animation (only for bot)\n    const [displayedText, setDisplayedText] = useState('');\n    const [isTyping, setIsTyping] = useState(false);\n\n    useEffect(() => {\n        // Ensure chatContent is a string\n        const sanitizedChatContent = typeof chatContent === 'string' ? chatContent : String(chatContent);\n\n        if (isBot && sanitizedChatContent.length > 0) {\n            const tokens = tokenizeHTML(sanitizedChatContent);\n            let tokenIndex = 0;\n            let charIndex = 0;\n            let currentDisplayedText = '';\n\n            setIsTyping(true);\n            setDisplayedText('');\n\n            const typingSpeed = 15; // milliseconds per character\n            const tagDelay = 0; // delay after a tag\n\n            const type = () => {\n                if (tokenIndex >= tokens.length) {\n                    setIsTyping(false);\n                    return;\n                }\n\n                const currentToken = tokens[tokenIndex];\n\n                if (currentToken.startsWith('<')) {\n                    // It's an HTML tag, append it immediately\n                    currentDisplayedText += currentToken;\n                    setDisplayedText(currentDisplayedText);\n                    tokenIndex++;\n                    // Continue typing after a small delay\n                    setTimeout(type, tagDelay);\n                } else {\n                    // It's text, append character by character\n                    if (charIndex < currentToken.length) {\n                        currentDisplayedText += currentToken.charAt(charIndex);\n                        setDisplayedText(currentDisplayedText);\n                        charIndex++;\n                        setTimeout(type, typingSpeed);\n                    } else {\n                        // Move to next token\n                        tokenIndex++;\n                        charIndex = 0;\n                        // Small delay before next token\n                        setTimeout(type, tagDelay);\n                    }\n                }\n            };\n\n            type();\n        }\n    }, [isBot, chatContent]);\n\n    return (\n        <div className={`w-full flex flex-row transform transition-transform duration-300 animate-popIn`}>\n            {/* Left Profile Bubble (Bot) */}\n            <div className=\"w-1/12 flex flex-col justify-start items-center pb-6\">\n                {isBot && (<ChatProfileBubble user=\"bot\" />)}\n            </div>\n            \n            {/* Chat Content */}\n            <div className={contentClass}>\n                <div className={chatBubbleClasses}>\n                    <p \n                        className=\"text-gray-700 text-sm font-semibold leading-5 whitespace-pre-wrap\"\n                        dangerouslySetInnerHTML={{ __html: isBot ? displayedText : chatContent }}\n                    />\n                    {isBot && isTyping && (\n                        <span className=\"inline-block w-2 h-2 ml-1 bg-gray-700 rounded-full animate-bounce\"></span>\n                    )}\n                </div>\n            </div>\n            \n            {/* Right Profile Bubble (User) */}\n            <div className=\"w-1/12 flex flex-col justify-end items-center pt-6\">\n                {isUser && (<ChatProfileBubble user=\"user\" />)}\n            </div>\n        </div>\n    );\n}\n\n// Helper function to tokenize HTML content\nfunction tokenizeHTML(html) {\n    const regex = /(<[^>]+>)/g;\n    const tokens = html.split(regex).filter(token => token.length > 0);\n    return tokens;\n}\n\n// PropTypes for type checking\nChatRow.propTypes = {\n    chatContent: PropTypes.string.isRequired,\n    originatingUser: PropTypes.oneOf(['user', 'bot']).isRequired,\n};\n\nexport default ChatRow;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}