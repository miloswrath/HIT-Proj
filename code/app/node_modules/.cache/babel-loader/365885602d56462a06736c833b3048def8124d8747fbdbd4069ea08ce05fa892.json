{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Fall24 MS\\\\CS3980 Proj\\\\cap_rx_3\\\\HIT-Proj\\\\code\\\\app\\\\src\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport ChatRow from './ChatRow';\nimport PreMessage from './PreMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  preMessageContent,\n  interpretation\n}, ref) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [showPreMessage, setShowPreMessage] = useState(true);\n  const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\n\n  // Expose addMessage function to parent via ref\n  useImperativeHandle(ref, () => ({\n    addMessage: (chatContent, originatingUser) => {\n      console.log('STANDARD_Window_AddMessage_Proc');\n      setMessages(prevMessages => [...prevMessages, {\n        chatContent,\n        originatingUser\n      }]);\n    }\n  }));\n\n  // Handler for PreMessage click\n  const handlePreMessageClick = () => {\n    // Start exit animation\n    setIsPreMessageExiting(true);\n    setTimeout(() => {\n      setMessages(prevMessages => [...prevMessages, {\n        chatContent: preMessageContent,\n        originatingUser: 'user'\n      }]);\n      // After a small delay, add bot ChatRow\n      setTimeout(() => {\n        setMessages(prevMessages => [...prevMessages, {\n          chatContent: interpretation,\n          originatingUser: 'bot'\n        }]);\n      }, 1250); // Delay between user and bot messages (300ms)\n      // Hide the PreMessage component\n      setShowPreMessage(false);\n      setIsPreMessageExiting(false);\n    }, 150); // Match the popOut animation duration (0.3s)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\",\n    children: [showPreMessage && /*#__PURE__*/_jsxDEV(PreMessage, {\n      chatContent: preMessageContent,\n      onClick: handlePreMessageClick,\n      isExiting: isPreMessageExiting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatRow, {\n      chatContent: message.chatContent,\n      originatingUser: message.originatingUser\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}, \"+00QnU/+5UuERRq3A/bJNNNIgo0=\")), \"+00QnU/+5UuERRq3A/bJNNNIgo0=\");\n_c2 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatWindow$forwardRef\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useImperativeHandle","forwardRef","ChatRow","PreMessage","jsxDEV","_jsxDEV","ChatWindow","_s","_c","preMessageContent","interpretation","ref","messages","setMessages","showPreMessage","setShowPreMessage","isPreMessageExiting","setIsPreMessageExiting","addMessage","chatContent","originatingUser","console","log","prevMessages","handlePreMessageClick","setTimeout","className","children","onClick","isExiting","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","_c2","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Fall24 MS/CS3980 Proj/cap_rx_3/HIT-Proj/code/app/src/ChatWindow.js"],"sourcesContent":["import React, { useState, useImperativeHandle, forwardRef } from 'react'; \r\nimport ChatRow from './ChatRow';\r\nimport PreMessage from './PreMessage';\r\n\r\nconst ChatWindow = forwardRef(({ preMessageContent, interpretation }, ref) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [showPreMessage, setShowPreMessage] = useState(true);\r\n    const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\r\n\r\n    // Expose addMessage function to parent via ref\r\n    useImperativeHandle(ref, () => ({\r\n        addMessage: (chatContent, originatingUser) => {\r\n            console.log('STANDARD_Window_AddMessage_Proc')\r\n            setMessages(prevMessages => [...prevMessages, { chatContent, originatingUser }]);\r\n        }\r\n    }));\r\n\r\n    // Handler for PreMessage click\r\n    const handlePreMessageClick = () => {\r\n        // Start exit animation\r\n        setIsPreMessageExiting(true);\r\n        setTimeout(() => {\r\n            setMessages(prevMessages => [\r\n                ...prevMessages, \r\n                { chatContent: preMessageContent, originatingUser: 'user' }\r\n            ]);\r\n            // After a small delay, add bot ChatRow\r\n            setTimeout(() => {\r\n                setMessages(prevMessages => [\r\n                    ...prevMessages, \r\n                    { chatContent: interpretation, originatingUser: 'bot' }\r\n                ]);\r\n            }, 1250); // Delay between user and bot messages (300ms)\r\n            // Hide the PreMessage component\r\n            setShowPreMessage(false);\r\n            setIsPreMessageExiting(false);\r\n        }, 150); // Match the popOut animation duration (0.3s)\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\">\r\n            {/* Conditionally render PreMessage with animation */}\r\n            {showPreMessage && (\r\n                <PreMessage \r\n                    chatContent={preMessageContent} \r\n                    onClick={handlePreMessageClick} \r\n                    isExiting={isPreMessageExiting}\r\n                />\r\n            )}\r\n            \r\n            {/* Render ChatRows with animation */}\r\n            {messages.map((message, index) => (\r\n                <ChatRow\r\n                    key={index}\r\n                    chatContent={message.chatContent}\r\n                    originatingUser={message.originatingUser}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ChatWindow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,OAAO;AACxE,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,gBAAAC,EAAA,cAAGN,UAAU,CAAAO,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,iBAAiB;EAAEC;AAAe,CAAC,EAAEC,GAAG,KAAK;EAAAJ,EAAA;EAC1E,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACiB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAErE;EACAC,mBAAmB,CAACW,GAAG,EAAE,OAAO;IAC5BO,UAAU,EAAEA,CAACC,WAAW,EAAEC,eAAe,KAAK;MAC1CC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CT,WAAW,CAACU,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEJ,WAAW;QAAEC;MAAgB,CAAC,CAAC,CAAC;IACpF;EACJ,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;IAChC;IACAP,sBAAsB,CAAC,IAAI,CAAC;IAC5BQ,UAAU,CAAC,MAAM;MACbZ,WAAW,CAACU,YAAY,IAAI,CACxB,GAAGA,YAAY,EACf;QAAEJ,WAAW,EAAEV,iBAAiB;QAAEW,eAAe,EAAE;MAAO,CAAC,CAC9D,CAAC;MACF;MACAK,UAAU,CAAC,MAAM;QACbZ,WAAW,CAACU,YAAY,IAAI,CACxB,GAAGA,YAAY,EACf;UAAEJ,WAAW,EAAET,cAAc;UAAEU,eAAe,EAAE;QAAM,CAAC,CAC1D,CAAC;MACN,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACV;MACAL,iBAAiB,CAAC,KAAK,CAAC;MACxBE,sBAAsB,CAAC,KAAK,CAAC;IACjC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACb,CAAC;EAED,oBACIZ,OAAA;IAAKqB,SAAS,EAAC,6GAA6G;IAAAC,QAAA,GAEvHb,cAAc,iBACXT,OAAA,CAACF,UAAU;MACPgB,WAAW,EAAEV,iBAAkB;MAC/BmB,OAAO,EAAEJ,qBAAsB;MAC/BK,SAAS,EAAEb;IAAoB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACJ,EAGArB,QAAQ,CAACsB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzB/B,OAAA,CAACH,OAAO;MAEJiB,WAAW,EAAEgB,OAAO,CAAChB,WAAY;MACjCC,eAAe,EAAEe,OAAO,CAACf;IAAgB,GAFpCgB,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC,kCAAC;AAACI,GAAA,GAxDG/B,UAAU;AA0DhB,eAAeA,UAAU;AAAC,IAAAE,EAAA,EAAA6B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}