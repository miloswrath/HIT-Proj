{"ast":null,"code":"var _jsxFileName = \"/Users/zakg04/Documents/Personal-Cloud/theJourney/theProj/HIT-Proj/code/app/src/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport ChatRow from './ChatRow';\nimport PreMessage from './PreMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  preMessageContent,\n  interpretation\n}, ref) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [showPreMessage, setShowPreMessage] = useState(true);\n  const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\n  // Expose addMessage function to parent via ref\n  useImperativeHandle(ref, () => ({\n    /**\n     * Adds a new message to the chat and sends it to the server.\n     * @param {string} chatContent - The content of the chat message.\n     * @param {string} originatingUser - The user who originated the message.\n     */\n    addMessage: async (chatContent, originatingUser) => {\n      const newMessage = {\n        chatContent,\n        originatingUser\n      };\n      const updatedMessages = [...messages, newMessage];\n      try {\n        const response = await fetch('http://localhost:8000/api/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            currentMessage: newMessage,\n            previousMessages: messages\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Server response:', data);\n\n        // Update the messages state with the new message\n        const updateMessagesWithBotResponse = [...updatedMessages, {\n          chatContent: data.response,\n          originatingUser: 'bot '\n        }];\n        setMessages(updateMessagesWithBotResponse);\n      } catch (error) {\n        console.error('Error sending message to server:', error);\n      }\n    }\n  }));\n  // Handler for PreMessage click\n  const handlePreMessageClick = () => {\n    // Start exit animation\n    setIsPreMessageExiting(true);\n    setTimeout(() => {\n      setMessages(prevMessages => [...prevMessages, {\n        chatContent: preMessageContent,\n        originatingUser: 'user'\n      }]);\n      // After a small delay, add bot ChatRow\n\n      setTimeout(() => {\n        setMessages(prevMessages => [...prevMessages, {\n          chatContent: interpretation,\n          originatingUser: 'bot'\n        }]);\n      }, 1250); // Delay between user and bot messages (300ms)\n      // Hide the PreMessage component\n      setShowPreMessage(false);\n      setIsPreMessageExiting(false);\n    }, 150); // Match the popOut animation duration (0.3s)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\",\n    children: [showPreMessage && /*#__PURE__*/_jsxDEV(PreMessage, {\n      chatContent: preMessageContent,\n      onClick: handlePreMessageClick,\n      isExiting: isPreMessageExiting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatRow, {\n      chatContent: message.chatContent,\n      originatingUser: message.originatingUser\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}, \"+00QnU/+5UuERRq3A/bJNNNIgo0=\")), \"+00QnU/+5UuERRq3A/bJNNNIgo0=\");\n_c2 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatWindow$forwardRef\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useImperativeHandle","forwardRef","ChatRow","PreMessage","jsxDEV","_jsxDEV","ChatWindow","_s","_c","preMessageContent","interpretation","ref","messages","setMessages","showPreMessage","setShowPreMessage","isPreMessageExiting","setIsPreMessageExiting","addMessage","chatContent","originatingUser","newMessage","updatedMessages","response","fetch","method","headers","body","JSON","stringify","currentMessage","previousMessages","ok","Error","data","json","console","log","updateMessagesWithBotResponse","error","handlePreMessageClick","setTimeout","prevMessages","className","children","onClick","isExiting","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","_c2","$RefreshReg$"],"sources":["/Users/zakg04/Documents/Personal-Cloud/theJourney/theProj/HIT-Proj/code/app/src/ChatWindow.js"],"sourcesContent":["import React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport ChatRow from './ChatRow';\nimport PreMessage from './PreMessage';\n\nconst ChatWindow = forwardRef(({ preMessageContent, interpretation }, ref) => {\n    const [messages, setMessages] = useState([]);\n    const [showPreMessage, setShowPreMessage] = useState(true);\n    const [isPreMessageExiting, setIsPreMessageExiting] = useState(false);\n  // Expose addMessage function to parent via ref\n     useImperativeHandle(ref, () => ({\n      /**\n       * Adds a new message to the chat and sends it to the server.\n       * @param {string} chatContent - The content of the chat message.\n       * @param {string} originatingUser - The user who originated the message.\n       */\n      addMessage: async (chatContent, originatingUser) => {\n          const newMessage = { chatContent, originatingUser };\n          const updatedMessages = [...messages, newMessage];\n\n          try {\n              const response = await fetch('http://localhost:8000/api/messages', {\n                  method: 'POST',\n                  headers: {\n                      'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                      currentMessage: newMessage,\n                      previousMessages: messages,\n                  }),\n              });\n\n              if (!response.ok) {\n                  throw new Error('Network response was not ok');\n              }\n\n              const data = await response.json();\n              console.log('Server response:', data);\n\n              // Update the messages state with the new message\n            const updateMessagesWithBotResponse = [...updatedMessages, { chatContent: data.response, originatingUser: 'bot '}];\n            setMessages(updateMessagesWithBotResponse)\n          } catch (error) {\n              console.error('Error sending message to server:', error);\n          }\n      },\n  }));\n    // Handler for PreMessage click\n    const handlePreMessageClick = () => {\n        // Start exit animation\n        setIsPreMessageExiting(true);\n        setTimeout(() => {\n            setMessages(prevMessages => [\n                ...prevMessages,\n                { chatContent: preMessageContent, originatingUser: 'user' }\n            ]);\n            // After a small delay, add bot ChatRow\n\n\n            setTimeout(() => {\n                setMessages(prevMessages => [\n                    ...prevMessages,\n                    { chatContent: interpretation, originatingUser: 'bot' }\n                ]);\n            }, 1250); // Delay between user and bot messages (300ms)\n            // Hide the PreMessage component\n            setShowPreMessage(false);\n            setIsPreMessageExiting(false);\n        }, 150); // Match the popOut animation duration (0.3s)\n    };\n\n    return (\n        <div className=\"bg-gray-300 rounded-xl py-4 flex flex-col mx-2 shadow-md shadow-inner space-y-6 transition-all duration-500\">\n            {/* Conditionally render PreMessage with animation */}\n            {showPreMessage && (\n                <PreMessage\n                    chatContent={preMessageContent}\n                    onClick={handlePreMessageClick}\n                    isExiting={isPreMessageExiting}\n                />\n            )}\n            {/* Render ChatRows with animation */}\n            {messages.map((message, index) => (\n                <ChatRow\n                    key={index}\n                    chatContent={message.chatContent}\n                    originatingUser={message.originatingUser}\n                />\n            ))}\n        </div>\n    );\n});\n\nexport default ChatWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}