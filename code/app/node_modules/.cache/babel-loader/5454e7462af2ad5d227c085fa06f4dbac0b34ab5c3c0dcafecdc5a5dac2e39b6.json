{"ast":null,"code":"/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Nodes} Nodes\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').RootContent} RootContent\r\n *\r\n * @typedef {import('property-information').Info} Info\r\n * @typedef {import('property-information').Schema} Schema\r\n */\n\n/**\r\n * @typedef {Element | Root} Result\r\n *   Result from a `h` (or `s`) call.\r\n *\r\n * @typedef {number | string} StyleValue\r\n *   Value for a CSS style field.\r\n * @typedef {Record<string, StyleValue>} Style\r\n *   Supported value of a `style` prop.\r\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\r\n *   Primitive property value.\r\n * @typedef {Array<number | string>} ArrayValue\r\n *   List of property values for space- or comma separated values (such as `className`).\r\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\r\n *   Primitive value or list value.\r\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\r\n *   Acceptable value for element properties.\r\n *\r\n * @typedef {number | string | null | undefined} PrimitiveChild\r\n *   Primitive children, either ignored (nullish), or turned into text nodes.\r\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\r\n *   List of children.\r\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\r\n *   List of children (deep).\r\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\r\n *   Acceptable child value.\r\n */\n\nimport { parse as commas } from 'comma-separated-tokens';\nimport { parseSelector } from 'hast-util-parse-selector';\nimport { find, normalize } from 'property-information';\nimport { parse as spaces } from 'space-separated-tokens';\nconst own = {}.hasOwnProperty;\n\n/**\r\n * @param {Schema} schema\r\n *   Schema to use.\r\n * @param {string} defaultTagName\r\n *   Default tag name.\r\n * @param {Array<string> | undefined} [caseSensitive]\r\n *   Case-sensitive tag names (default: `undefined`).\r\n * @returns\r\n *   `h`.\r\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive);\n\n  /**\r\n   * Hyperscript compatible DSL for creating virtual hast trees.\r\n   *\r\n   * @overload\r\n   * @param {null | undefined} [selector]\r\n   * @param {...Child} children\r\n   * @returns {Root}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {Properties} properties\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @param {string | null | undefined} [selector]\r\n   *   Selector.\r\n   * @param {Child | Properties | null | undefined} [properties]\r\n   *   Properties (or first child) (default: `undefined`).\r\n   * @param {...Child} children\r\n   *   Children.\r\n   * @returns {Result}\r\n   *   Result.\r\n   */\n  function h(selector, properties, ...children) {\n    let index = -1;\n    /** @type {Result} */\n    let node;\n    if (selector === undefined || selector === null) {\n      node = {\n        type: 'root',\n        children: []\n      };\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */properties;\n      children.unshift(child);\n    } else {\n      node = parseSelector(selector, defaultTagName);\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase();\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName];\n      }\n\n      // Handle props.\n      if (isChild(properties)) {\n        children.unshift(properties);\n      } else {\n        /** @type {string} */\n        let key;\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key]);\n          }\n        }\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index]);\n    }\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {\n        type: 'root',\n        children: node.children\n      };\n      node.children = [];\n    }\n    return node;\n  }\n  return h;\n}\n\n/**\r\n * Check if something is properties or a child.\r\n *\r\n * @param {Child | Properties} value\r\n *   Value to check.\r\n * @returns {value is Child}\r\n *   Whether `value` is definitely a child.\r\n */\nfunction isChild(value) {\n  // Never properties if not an object.\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return true;\n  }\n\n  // Never node without `type`; thatâ€™s the main discriminator.\n  if (typeof value.type !== 'string') return false;\n\n  // Slower check: never property value if object or array with\n  // non-number/strings.\n  const record = /** @type {Record<string, unknown>} */value;\n  const keys = Object.keys(value);\n  for (const key of keys) {\n    const value = record[key];\n    if (value && typeof value === 'object') {\n      if (!Array.isArray(value)) return true;\n      const list = /** @type {Array<unknown>} */value;\n      for (const item of list) {\n        if (typeof item !== 'number' && typeof item !== 'string') {\n          return true;\n        }\n      }\n    }\n  }\n\n  // Also see empty `children` as a node.\n  if ('children' in value && Array.isArray(value.children)) {\n    return true;\n  }\n\n  // Default to properties, someone can always pass an empty object,\n  // put `data: {}` in a node,\n  // or wrap it in an array.\n  return false;\n}\n\n/**\r\n * @param {Schema} schema\r\n *   Schema.\r\n * @param {Properties} properties\r\n *   Properties object.\r\n * @param {string} key\r\n *   Property name.\r\n * @param {PropertyValue | Style} value\r\n *   Property value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key);\n  let index = -1;\n  /** @type {PropertyValue} */\n  let result;\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return;\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return;\n    result = value;\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value;\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value);\n    } else if (info.commaSeparated) {\n      result = commas(value);\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '));\n    } else {\n      result = parsePrimitive(info, info.property, value);\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat();\n  } else {\n    result = info.property === 'style' ? style(value) : String(value);\n  }\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = [];\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */\n      parsePrimitive(info, info.property, result[index]);\n      finalResult[index] = value;\n    }\n    result = finalResult;\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */result;\n    result = properties.className.concat(value);\n  }\n  properties[info.property] = result;\n}\n\n/**\r\n * @param {Array<RootContent>} nodes\r\n *   Children.\r\n * @param {Child} value\r\n *   Child.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\nfunction addChild(nodes, value) {\n  let index = -1;\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({\n      type: 'text',\n      value: String(value)\n    });\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index]);\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children);\n    } else {\n      nodes.push(value);\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\n  }\n}\n\n/**\r\n * Parse a single primitives.\r\n *\r\n * @param {Info} info\r\n *   Property information.\r\n * @param {string} name\r\n *   Property name.\r\n * @param {PrimitiveValue} value\r\n *   Property value.\r\n * @returns {PrimitiveValue}\r\n *   Property value.\r\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value);\n    }\n    if ((info.boolean || info.overloadedBoolean) && (value === '' || normalize(value) === normalize(name))) {\n      return true;\n    }\n  }\n  return value;\n}\n\n/**\r\n * Serialize a `style` object as a string.\r\n *\r\n * @param {Style} value\r\n *   Style object.\r\n * @returns {string}\r\n *   CSS string.\r\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {string} */\n  let key;\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '));\n    }\n  }\n  return result.join('; ');\n}\n\n/**\r\n * Create a map to adjust casing.\r\n *\r\n * @param {Array<string>} values\r\n *   List of properly cased keys.\r\n * @returns {Record<string, string>}\r\n *   Map of lowercase keys to uppercase keys.\r\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {};\n  let index = -1;\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index];\n  }\n  return result;\n}","map":{"version":3,"names":["parse","commas","parseSelector","find","normalize","spaces","own","hasOwnProperty","createH","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","children","index","node","undefined","type","child","unshift","tagName","toLowerCase","call","isChild","key","addProperty","length","addChild","content","value","Array","isArray","record","keys","Object","list","item","info","result","Number","isNaN","spaceSeparated","commaSeparated","commaOrSpaceSeparated","join","parsePrimitive","property","concat","style","String","finalResult","className","nodes","push","Error","name","number","boolean","overloadedBoolean","values"],"sources":["C:/Users/Admin/Desktop/Fall24 MS/CS3980 Proj/cap_rx_3/HIT-Proj/code/app/node_modules/hastscript/lib/create-h.js"],"sourcesContent":["/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Nodes} Nodes\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').RootContent} RootContent\r\n *\r\n * @typedef {import('property-information').Info} Info\r\n * @typedef {import('property-information').Schema} Schema\r\n */\r\n\r\n/**\r\n * @typedef {Element | Root} Result\r\n *   Result from a `h` (or `s`) call.\r\n *\r\n * @typedef {number | string} StyleValue\r\n *   Value for a CSS style field.\r\n * @typedef {Record<string, StyleValue>} Style\r\n *   Supported value of a `style` prop.\r\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\r\n *   Primitive property value.\r\n * @typedef {Array<number | string>} ArrayValue\r\n *   List of property values for space- or comma separated values (such as `className`).\r\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\r\n *   Primitive value or list value.\r\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\r\n *   Acceptable value for element properties.\r\n *\r\n * @typedef {number | string | null | undefined} PrimitiveChild\r\n *   Primitive children, either ignored (nullish), or turned into text nodes.\r\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\r\n *   List of children.\r\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\r\n *   List of children (deep).\r\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\r\n *   Acceptable child value.\r\n */\r\n\r\nimport {parse as commas} from 'comma-separated-tokens'\r\nimport {parseSelector} from 'hast-util-parse-selector'\r\nimport {find, normalize} from 'property-information'\r\nimport {parse as spaces} from 'space-separated-tokens'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param {Schema} schema\r\n *   Schema to use.\r\n * @param {string} defaultTagName\r\n *   Default tag name.\r\n * @param {Array<string> | undefined} [caseSensitive]\r\n *   Case-sensitive tag names (default: `undefined`).\r\n * @returns\r\n *   `h`.\r\n */\r\nexport function createH(schema, defaultTagName, caseSensitive) {\r\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\r\n\r\n  /**\r\n   * Hyperscript compatible DSL for creating virtual hast trees.\r\n   *\r\n   * @overload\r\n   * @param {null | undefined} [selector]\r\n   * @param {...Child} children\r\n   * @returns {Root}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {Properties} properties\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @param {string | null | undefined} [selector]\r\n   *   Selector.\r\n   * @param {Child | Properties | null | undefined} [properties]\r\n   *   Properties (or first child) (default: `undefined`).\r\n   * @param {...Child} children\r\n   *   Children.\r\n   * @returns {Result}\r\n   *   Result.\r\n   */\r\n  function h(selector, properties, ...children) {\r\n    let index = -1\r\n    /** @type {Result} */\r\n    let node\r\n\r\n    if (selector === undefined || selector === null) {\r\n      node = {type: 'root', children: []}\r\n      // Properties are not supported for roots.\r\n      const child = /** @type {Child} */ (properties)\r\n      children.unshift(child)\r\n    } else {\r\n      node = parseSelector(selector, defaultTagName)\r\n      // Normalize the name.\r\n      node.tagName = node.tagName.toLowerCase()\r\n      if (adjust && own.call(adjust, node.tagName)) {\r\n        node.tagName = adjust[node.tagName]\r\n      }\r\n\r\n      // Handle props.\r\n      if (isChild(properties)) {\r\n        children.unshift(properties)\r\n      } else {\r\n        /** @type {string} */\r\n        let key\r\n\r\n        for (key in properties) {\r\n          if (own.call(properties, key)) {\r\n            addProperty(schema, node.properties, key, properties[key])\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle children.\r\n    while (++index < children.length) {\r\n      addChild(node.children, children[index])\r\n    }\r\n\r\n    if (node.type === 'element' && node.tagName === 'template') {\r\n      node.content = {type: 'root', children: node.children}\r\n      node.children = []\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  return h\r\n}\r\n\r\n/**\r\n * Check if something is properties or a child.\r\n *\r\n * @param {Child | Properties} value\r\n *   Value to check.\r\n * @returns {value is Child}\r\n *   Whether `value` is definitely a child.\r\n */\r\nfunction isChild(value) {\r\n  // Never properties if not an object.\r\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\r\n    return true\r\n  }\r\n\r\n  // Never node without `type`; thatâ€™s the main discriminator.\r\n  if (typeof value.type !== 'string') return false\r\n\r\n  // Slower check: never property value if object or array with\r\n  // non-number/strings.\r\n  const record = /** @type {Record<string, unknown>} */ (value)\r\n  const keys = Object.keys(value)\r\n\r\n  for (const key of keys) {\r\n    const value = record[key]\r\n\r\n    if (value && typeof value === 'object') {\r\n      if (!Array.isArray(value)) return true\r\n\r\n      const list = /** @type {Array<unknown>} */ (value)\r\n\r\n      for (const item of list) {\r\n        if (typeof item !== 'number' && typeof item !== 'string') {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Also see empty `children` as a node.\r\n  if ('children' in value && Array.isArray(value.children)) {\r\n    return true\r\n  }\r\n\r\n  // Default to properties, someone can always pass an empty object,\r\n  // put `data: {}` in a node,\r\n  // or wrap it in an array.\r\n  return false\r\n}\r\n\r\n/**\r\n * @param {Schema} schema\r\n *   Schema.\r\n * @param {Properties} properties\r\n *   Properties object.\r\n * @param {string} key\r\n *   Property name.\r\n * @param {PropertyValue | Style} value\r\n *   Property value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addProperty(schema, properties, key, value) {\r\n  const info = find(schema, key)\r\n  let index = -1\r\n  /** @type {PropertyValue} */\r\n  let result\r\n\r\n  // Ignore nullish and NaN values.\r\n  if (value === undefined || value === null) return\r\n\r\n  if (typeof value === 'number') {\r\n    // Ignore NaN.\r\n    if (Number.isNaN(value)) return\r\n\r\n    result = value\r\n  }\r\n  // Booleans.\r\n  else if (typeof value === 'boolean') {\r\n    result = value\r\n  }\r\n  // Handle list values.\r\n  else if (typeof value === 'string') {\r\n    if (info.spaceSeparated) {\r\n      result = spaces(value)\r\n    } else if (info.commaSeparated) {\r\n      result = commas(value)\r\n    } else if (info.commaOrSpaceSeparated) {\r\n      result = spaces(commas(value).join(' '))\r\n    } else {\r\n      result = parsePrimitive(info, info.property, value)\r\n    }\r\n  } else if (Array.isArray(value)) {\r\n    result = value.concat()\r\n  } else {\r\n    result = info.property === 'style' ? style(value) : String(value)\r\n  }\r\n\r\n  if (Array.isArray(result)) {\r\n    /** @type {Array<number | string>} */\r\n    const finalResult = []\r\n\r\n    while (++index < result.length) {\r\n      // Assume no booleans in array.\r\n      const value = /** @type {number | string} */ (\r\n        parsePrimitive(info, info.property, result[index])\r\n      )\r\n      finalResult[index] = value\r\n    }\r\n\r\n    result = finalResult\r\n  }\r\n\r\n  // Class names (which can be added both on the `selector` and here).\r\n  if (info.property === 'className' && Array.isArray(properties.className)) {\r\n    // Assume no booleans in `className`.\r\n    const value = /** @type {number | string} */ (result)\r\n    result = properties.className.concat(value)\r\n  }\r\n\r\n  properties[info.property] = result\r\n}\r\n\r\n/**\r\n * @param {Array<RootContent>} nodes\r\n *   Children.\r\n * @param {Child} value\r\n *   Child.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addChild(nodes, value) {\r\n  let index = -1\r\n\r\n  if (value === undefined || value === null) {\r\n    // Empty.\r\n  } else if (typeof value === 'string' || typeof value === 'number') {\r\n    nodes.push({type: 'text', value: String(value)})\r\n  } else if (Array.isArray(value)) {\r\n    while (++index < value.length) {\r\n      addChild(nodes, value[index])\r\n    }\r\n  } else if (typeof value === 'object' && 'type' in value) {\r\n    if (value.type === 'root') {\r\n      addChild(nodes, value.children)\r\n    } else {\r\n      nodes.push(value)\r\n    }\r\n  } else {\r\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a single primitives.\r\n *\r\n * @param {Info} info\r\n *   Property information.\r\n * @param {string} name\r\n *   Property name.\r\n * @param {PrimitiveValue} value\r\n *   Property value.\r\n * @returns {PrimitiveValue}\r\n *   Property value.\r\n */\r\nfunction parsePrimitive(info, name, value) {\r\n  if (typeof value === 'string') {\r\n    if (info.number && value && !Number.isNaN(Number(value))) {\r\n      return Number(value)\r\n    }\r\n\r\n    if (\r\n      (info.boolean || info.overloadedBoolean) &&\r\n      (value === '' || normalize(value) === normalize(name))\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Serialize a `style` object as a string.\r\n *\r\n * @param {Style} value\r\n *   Style object.\r\n * @returns {string}\r\n *   CSS string.\r\n */\r\nfunction style(value) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {string} */\r\n  let key\r\n\r\n  for (key in value) {\r\n    if (own.call(value, key)) {\r\n      result.push([key, value[key]].join(': '))\r\n    }\r\n  }\r\n\r\n  return result.join('; ')\r\n}\r\n\r\n/**\r\n * Create a map to adjust casing.\r\n *\r\n * @param {Array<string>} values\r\n *   List of properly cased keys.\r\n * @returns {Record<string, string>}\r\n *   Map of lowercase keys to uppercase keys.\r\n */\r\nfunction createAdjustMap(values) {\r\n  /** @type {Record<string, string>} */\r\n  const result = {}\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[values[index].toLowerCase()] = values[index]\r\n  }\r\n\r\n  return result\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}