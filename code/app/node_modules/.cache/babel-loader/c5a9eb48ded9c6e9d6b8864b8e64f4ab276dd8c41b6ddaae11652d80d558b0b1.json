{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Fall24 MS\\\\CS3980 Proj\\\\cap_rx_3\\\\HIT-Proj\\\\code\\\\app\\\\src\\\\ChatRow.js\",\n  _s = $RefreshSig$();\n// ChatRow.jsx\nimport React, { useState, useEffect } from 'react';\nimport ChatProfileBubble from './ChatProfileBubble';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\nimport rehypeRaw from 'rehype-raw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatRow({\n  chatContent,\n  originatingUser\n}) {\n  _s();\n  const isUser = originatingUser === 'user';\n  const isBot = originatingUser === 'bot';\n  const chatBubbleClasses = `\n        bg-white w-3/4 py-4 px-6 \n        ${isUser ? 'rounded-l-2xl rounded-t-2xl ml-2 ' : ''}\n        ${isBot ? 'rounded-r-2xl rounded-b-2xl mr-2' : ''}\n    `;\n  const contentClass = `\n        w-8/9 flex flex-row\n        ${isUser ? 'justify-end' : ''}\n        ${isBot ? 'justify-start' : ''}\n    `;\n  const [displayedText, setDisplayedText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasTyped, setHasTyped] = useState(false);\n  useEffect(() => {\n    const sanitizedText = typeof chatContent === 'string' ? chatContent : String(chatContent);\n    console.log(sanitizedText);\n    if (isBot && !hasTyped && sanitizedText.length > 0) {\n      setHasTyped(true);\n      let index = 0;\n      setIsTyping(true);\n      setDisplayedText(''); // Ensure it starts from empty\n\n      const typingSpeed = 15; // milliseconds per character\n      const type = () => {\n        if (index < sanitizedText.length) {\n          setDisplayedText(prev => prev + sanitizedText.charAt(index)); // Add one character at a time\n          index++;\n          setTimeout(type, typingSpeed);\n        } else {\n          setIsTyping(false); // End typing\n        }\n      };\n      type();\n    }\n  }, [isBot, chatContent, hasTyped]);\n  const contentToRender = isBot ? displayedText : chatContent;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `w-full flex flex-row transform transition-transform duration-300 animate-popIn`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/12 flex flex-col justify-start items-center pb-6\",\n      children: isBot && /*#__PURE__*/_jsxDEV(ChatProfileBubble, {\n        user: \"bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: contentClass,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chatBubbleClasses,\n        children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          rehypePlugins: [rehypeRaw],\n          children: contentToRender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), isBot && isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"inline-block w-2 h-2 ml-1 bg-gray-700 rounded-full animate-bounce\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/12 flex flex-col justify-end items-center pt-6\",\n      children: isUser && /*#__PURE__*/_jsxDEV(ChatProfileBubble, {\n        user: \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n// Helper function to tokenize HTML content\n_s(ChatRow, \"h8V5QcnzTGRAqxBtSTxPUzvhRqc=\");\n_c = ChatRow;\nfunction tokenizeHTML(html) {\n  const regex = /(<[^>]+>)/g;\n  const tokens = html.split(regex).filter(token => token.length > 0);\n  return tokens;\n}\n\n// PropTypes for type checking\nChatRow.propTypes = {\n  chatContent: PropTypes.string.isRequired,\n  originatingUser: PropTypes.oneOf(['user', 'bot']).isRequired\n};\nexport default ChatRow;\nvar _c;\n$RefreshReg$(_c, \"ChatRow\");","map":{"version":3,"names":["React","useState","useEffect","ChatProfileBubble","PropTypes","ReactMarkdown","rehypeRaw","jsxDEV","_jsxDEV","ChatRow","chatContent","originatingUser","_s","isUser","isBot","chatBubbleClasses","contentClass","displayedText","setDisplayedText","isTyping","setIsTyping","hasTyped","setHasTyped","sanitizedText","String","console","log","length","index","typingSpeed","type","prev","charAt","setTimeout","contentToRender","className","children","user","fileName","_jsxFileName","lineNumber","columnNumber","rehypePlugins","_c","tokenizeHTML","html","regex","tokens","split","filter","token","propTypes","string","isRequired","oneOf","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Fall24 MS/CS3980 Proj/cap_rx_3/HIT-Proj/code/app/src/ChatRow.js"],"sourcesContent":["// ChatRow.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport ChatProfileBubble from './ChatProfileBubble';\r\nimport PropTypes from 'prop-types';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport rehypeRaw from 'rehype-raw'\r\n\r\nfunction ChatRow({ chatContent, originatingUser }) {\r\n    const isUser = originatingUser === 'user';\r\n    const isBot = originatingUser === 'bot';\r\n\r\n    const chatBubbleClasses = `\r\n        bg-white w-3/4 py-4 px-6 \r\n        ${isUser ? 'rounded-l-2xl rounded-t-2xl ml-2 ' : ''}\r\n        ${isBot ? 'rounded-r-2xl rounded-b-2xl mr-2' : ''}\r\n    `;\r\n\r\n    const contentClass = `\r\n        w-8/9 flex flex-row\r\n        ${isUser ? 'justify-end' : ''}\r\n        ${isBot ? 'justify-start' : ''}\r\n    `;\r\n\r\n    const [displayedText, setDisplayedText] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [hasTyped, setHasTyped] = useState(false)\r\n    useEffect(() => {\r\n        const sanitizedText = typeof chatContent === 'string' ? chatContent : String(chatContent);\r\n        console.log(sanitizedText)\r\n        if (isBot && !hasTyped && sanitizedText.length > 0) {\r\n            \r\n            setHasTyped(true)\r\n            let index = 0;\r\n            setIsTyping(true);\r\n            setDisplayedText(''); // Ensure it starts from empty\r\n\r\n            const typingSpeed = 15; // milliseconds per character\r\n            const type = () => {\r\n                if (index < sanitizedText.length) {\r\n                    setDisplayedText(prev => prev + sanitizedText.charAt(index)); // Add one character at a time\r\n                    index++;\r\n                    setTimeout(type, typingSpeed);\r\n                } else {\r\n                    setIsTyping(false); // End typing\r\n                }\r\n            };\r\n            type();\r\n        }\r\n    }, [isBot, chatContent, hasTyped]);    \r\n    const contentToRender = isBot ? displayedText : chatContent;\r\n\r\n    return (\r\n        <div className={`w-full flex flex-row transform transition-transform duration-300 animate-popIn`}>\r\n            {/* Left Profile Bubble (Bot) */}\r\n            <div className=\"w-1/12 flex flex-col justify-start items-center pb-6\">\r\n                {isBot && (<ChatProfileBubble user=\"bot\" />)}\r\n            </div>\r\n            {/* Chat Content */}\r\n            <div className={contentClass}>\r\n                <div className={chatBubbleClasses}>\r\n                    <ReactMarkdown rehypePlugins={[rehypeRaw]}>\r\n                        {contentToRender}\r\n                    </ReactMarkdown>\r\n                    {isBot && isTyping && (\r\n                        <span className=\"inline-block w-2 h-2 ml-1 bg-gray-700 rounded-full animate-bounce\"></span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {/* Right Profile Bubble (User) */}\r\n            <div className=\"w-1/12 flex flex-col justify-end items-center pt-6\">\r\n                {isUser && (<ChatProfileBubble user=\"user\" />)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Helper function to tokenize HTML content\r\nfunction tokenizeHTML(html) {\r\n    const regex = /(<[^>]+>)/g;\r\n    const tokens = html.split(regex).filter(token => token.length > 0);\r\n    return tokens;\r\n}\r\n\r\n// PropTypes for type checking\r\nChatRow.propTypes = {\r\n    chatContent: PropTypes.string.isRequired,\r\n    originatingUser: PropTypes.oneOf(['user', 'bot']).isRequired,\r\n};\r\n\r\nexport default ChatRow;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}